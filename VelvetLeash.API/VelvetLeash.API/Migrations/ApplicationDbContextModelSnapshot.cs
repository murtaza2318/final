// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VelvetLeash.API.Data;

#nullable disable

namespace VelvetLeash.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0") // Assuming current version, adjust if necessary
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PetSitter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("AverageRating")
                        .HasColumnType("real");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DailyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HomeDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarSitter")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<decimal?>("OvernightRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)"); // Changed to nvarchar(450) to match User.Id

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId") // Added Index for UserId
                        .IsUnique(); // Assuming one PetSitter profile per User

                    b.ToTable("PetSitters");
                });

            modelBuilder.Entity("VelvetLeash.API.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<int>("PetSitterId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("VelvetLeash.API.Models.BookingMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookingMessages");
                });

            modelBuilder.Entity("VelvetLeash.API.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GetAlongWithCats")
                        .HasColumnType("bit");

                    b.Property<bool>("GetAlongWithDogs")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnsureWithCats")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnsureWithDogs")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("VelvetLeash.API.Models.PetSitterService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PetSitterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetSitterId");

                    b.ToTable("PetSitterServices");
                });

            modelBuilder.Entity("VelvetLeash.API.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RevieweeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)"); // Should this be nvarchar(450) and FK to User?

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)"); // Should this be nvarchar(450) and FK to User?

                    b.HasKey("Id");

                    // Potential: Add indices and foreign keys for ReviewerId and RevieweeId if they map to User.Id
                    // b.HasIndex("ReviewerId");
                    // b.HasIndex("RevieweeId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("VelvetLeash.API.Models.User", b => // Added User entity
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)"); // Consider adding .HasIndex("IX_Users_Email", IsUnique = true) if emails must be unique

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0); // Default to Booker

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VelvetLeash.API.Models.UserNotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BookingDeclined")
                        .HasColumnType("bit");

                    b.Property<bool>("BookingRequests")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("MarketingEmails")
                        .HasColumnType("bit");

                    b.Property<bool>("MarketingSms")
                        .HasColumnType("bit");

                    b.Property<bool>("MessageNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("MmsSupport")
                        .HasColumnType("bit");

                    b.Property<bool>("NewInquiries")
                        .HasColumnType("bit");

                    b.Property<bool>("NewMessages")
                        .HasColumnType("bit");

                    b.Property<bool>("QuietHours")
                        .HasColumnType("bit");

                    b.Property<bool>("SmsNotifications")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)"); // Changed to nvarchar(450) to match User.Id

                    b.HasKey("Id");

                    b.HasIndex("UserId"); // Added Index for UserId

                    b.ToTable("UserNotificationSettings");
                });


            // Relationships for User
            modelBuilder.Entity("PetSitter", b =>
                {
                    b.HasOne("VelvetLeash.API.Models.User", "User")
                        .WithOne("PetSitterProfile") // Assuming PetSitterProfile is the navigation property in User model
                        .HasForeignKey("PetSitter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VelvetLeash.API.Models.Pet", b =>
                {
                     b.HasOne("VelvetLeash.API.Models.User", null) // Assuming Pet has a UserId pointing to User
                        .WithMany("Pets") // Assuming Pets is the navigation property in User model
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VelvetLeash.API.Models.Booking", b =>
                {
                     b.HasOne("VelvetLeash.API.Models.User", null) // Assuming Booking has a UserId pointing to User
                        .WithMany("Bookings") // Assuming Bookings is the navigation property in User model
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade) // Or Restrict, depending on business logic
                        .IsRequired();
                });

            // Potentially update Review relationships if ReviewerId/RevieweeId link to User
            // modelBuilder.Entity("VelvetLeash.API.Models.Review", b => { ... });


            modelBuilder.Entity("VelvetLeash.API.Models.PetSitterService", b =>
                {
                    b.HasOne("PetSitter", "PetSitter")
                        .WithMany() // If PetSitter has a collection of PetSitterService, add it here
                        .HasForeignKey("PetSitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetSitter");
                });

            modelBuilder.Entity("VelvetLeash.API.Models.UserNotificationSetting", b =>
                {
                    b.HasOne("VelvetLeash.API.Models.User", null)
                        .WithMany("NotificationSettings") // Assuming NotificationSettings is the navigation property in User
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
